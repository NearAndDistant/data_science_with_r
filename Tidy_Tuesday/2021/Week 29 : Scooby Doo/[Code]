---
title: "Scooby Doo Model"
author: "NearAndDistant"
date: "15/07/2021"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r import}

scooby_raw <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-07-13/scoobydoo.csv')

```

##### Wrangle Dataset
```{r}
library(tidyverse)

theme_set(theme_minimal())

# wrangle dataset into form we want it and cleaned for readibility before ensuring the predictor class is a factor for our decision tree model

scooby_cln <-
scooby_raw %>%
  splitstackshape::cSplit(c("monster_name" , 
                            "monster_gender" , 
                            "monster_type" , 
                            "monster_subtype" , 
                            "monster_species" , 
                            "culprit_name" ,
                            "culprit_gender") , 
                            sep = "," , direction = "long") %>%
  drop_na(monster_name) %>%
  filter(!is.na(imdb)) %>%
  mutate(date_aired = as.Date(date_aired , format = "%Y-%m-%b"),
         year_aired = 5 * lubridate::year(date_aired) %/% 5,
         monster_species = recode(monster_species, 'NULL' = NA_character_),
         monster_gender = recode(monster_gender, 'NULL' = NA_character_),
         monster_type = recode(monster_type, 'NULL' = NA_character_),
         monster_subtype = recode(monster_subtype, 'NULL' = NA_character_),
         culprit_gender = recode(monster_gender, 'NULL' = NA_character_),
         motive = recode(motive, 'NULL' = NA_character_),
         monster_real = recode(monster_real, 'NULL' = NA_character_),
         monster_type = fct_lump(monster_type , 7),
         motive = fct_lump_n(motive , n = 7),
         motive = factor(motive),
         monster_real = factor(monster_real),
         imdb = parse_number(imdb)) %>%
  select(title , year_aired , imdb , monster_real , monster_name , monster_gender , monster_type , monster_real , motive , culprit_gender) %>%
  drop_na(title , year_aired , imdb , monster_real , monster_name , monster_gender , monster_type , monster_real , motive , culprit_gender) %>%
  filter(monster_gender != "None")
  

```

#### Build the Cross Validaton Set

```{r}

library(tidymodels)

# we the split out data into the training and testing set
set.seed(888)

scooby_cv <- 
scooby_cln %>%
  initial_split(strata = "motive")

scooby_cv_train <- training(scooby_cv)
scooby_cv_test <- testing(scooby_cv)

```

##### Bootstrap Sample

```{r}

set.seed(666)

(scooby_training_boot <- bootstraps(scooby_cv_train , strata = motive))

```

##### Set Up Model

```{r}

# specify hyperparameters

mdl_spec <- 
  decision_tree(
    cost_complexity = tune(), # how complex is our tree allowed to be
    tree_depth = tune(), # how deep is our tree allowed to be
    min_n = tune()) %>% # how many observations allowed before decide to split further
  set_mode("classification") %>% # type of problem to solve
  set_engine("rpart") # computational method to use

```

```{r}

# tune hyperparameters

mdl_tune <-
  grid_regular(
    cost_complexity(),
    tree_depth(),
    min_n(),
    levels = 4)

```

##### Train Model

```{r}

doParallel::registerDoParallel()
set.seed(101)

mdl_rs <-
  tune_grid(
    object = mdl_spec,
    preprocessor = motive ~ imdb + year_aired ,
    resamples = scooby_training_boot,
    grid = mdl_tune,
    metrics = metric_set(accuracy , roc_auc , sensitivity , specificity))

```

##### Evaluate Model

```{r}

tune::autoplot(mdl_rs)

show_best(mdl_rs)

mdl_best <- tune::select_by_one_std_err(mdl_rs , -cost_complexity , metric = "roc_auc")

# finalise hyperparamter tuning with the selected specification
mdl_final <- finalize_model(mdl_spec , mdl_best)

```


```{r}

# train model using finalised hyperparameters
mdl_fit <- fit(mdl_final , motive ~ imdb + year_aired   , scooby_cv_train)

# trains and evaluates model once against training data and then automatically against testing data (unseen)
mdl_eval <- last_fit(mdl_final , motive ~ imdb + year_aired    , scooby_cv)

# testing data evaluation
workflowsets::collect_metrics(mdl_eval)

```

##### Palette
```{r}

showtext::showtext_auto()
sysfonts::font_add_google("Handlee" , "handlee")


mot_matrix_values <- c("#f7d84b" , "#bed931" , "#72c1bf" , "#f7a44c" , "#b37327" , "#a6473b" , "#40725b" , "#03a8bf" , "#fcfcfc")

```

```{r}

library(cowplot)

haunted_alpha <- 
  magick::image_read("https://wallpaper.dog/large/17030317.jpg") %>%
  magick::image_colorize(opacity = 25, color = 'white')

#### decision tree model

#plot_motives_mdl <-
ggdraw() +
draw_image(haunted_alpha, height = 1, width = 1) +
draw_plot(
  scooby_cv_train %>%
    ggplot(aes(imdb, year_aired)) +
    parttree::geom_parttree(data = mdl_fit , aes(fill = motive) , alpha = 0.7 , color = "grey50") +
    geom_jitter(aes(color = motive) , size = 1 , alpha = 1 , width = 0.12 , height = 1) +
    scale_fill_manual(values = mot_matrix_values) + 
    scale_color_manual(values = mot_matrix_values) +
    scale_y_continuous(breaks = seq(1965,2020,10)) +
    guides(color = FALSE , fill = guide_legend(override.aes = list(alpha = 0.6))) +
    labs(
      x = NULL,
      y = NULL,
      fill = NULL) +
    coord_flip() +
    theme(legend.position = c(1.1 , 0.175),
          legend.text = element_text(color = "black" , family = "handlee" , size = 10),
          axis.text = element_text(family = "handlee" , size = 20),
          panel.grid = element_blank(),
          plot.margin = margin(6,18.5,1,0.5, unit = "cm"))) +
draw_image("https://static.wikia.nocookie.net/warner-bros-entertainment/images/8/86/Scooby-Doo_Logo.png/revision/latest?cb=20161210065229",
           x = 0.020, y = 0.63, height = 0.5, width = 0.34) +
draw_plot_label("This graphic shows types of motives of monsters appearing in Scooby Doo from 1965-2020 (in points).\n  Through a decision tree model we can try and predict motive using the time period and IMDB score.\nAllowing us to ask 'can we, given the time period and IMDB score, determine a monsters likely motive?'\n                                                  Accuracy: 78.6%", 
                x = 0.075 , y = 0.99 , size = 16, color = "black" , family = "handlee") +
  draw_plot_label("Source: ScoobyPedia | Graphic: @NearAndDistant",
                  x = -0.115 , y = 0.11 , size = 16, color = "black" , family = "handlee")

```


```{r}

ggsave(here::here("Netflix.png"), dpi = 320, height = 10, width = 16)

```
